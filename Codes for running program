from mpl_toolkits.mplot3d import Axes3D
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
from tkinter import *
import numpy as np
import pandas as pd
import os

l1=['back_pain','constipation','abdominal_pain','skin_rash','high_fever','yellow_urine',
    'yellowing_of_eyes','acute_liver_failure','fluid_overload','swelling_of_stomach',
    'swelled_lymph_nodes','malaise','blurred_and_distorted_vision','phlegm','throat_irritation',
    'redness_of_eyes','sinus_pressure','runny_nose','congestion','chest_pain','weakness_in_limbs',
    'fast_heart_rate','pain_during_bowel_movements','pain_in_anal_region','bloody_stool',
    'irritation_in_anus','neck_pain','dizziness','cramps','bruising','obesity','swollen_legs',
    'swollen_blood_vessels','puffy_face_and_eyes','enlarged_thyroid','brittle_nails',
    'swollen_extremeties','excessive_hunger','extra_marital_contacts','drying_and_tingling_lips',
    'slurred_speech','knee_pain','hip_joint_pain','muscle_wasting','stiff_neck','swelling_joints',
    'movement_stiffness','spinning_movements','loss_of_balance','unsteadiness',
    'weakness_of_one_body_side','loss_of_smell','bladder_discomfort','foul_smell_of urine',
    'continuous_feel_of_urine','passage_of_gases','internal_itching','toxic_look_(typhos)',
    'depression','irritability','muscle_pain','altered_sensorium','red_spots_over_body','belly_pain',
    'abnormal_menstruation','patches_in_throat','watering_from_eyes','increased_appetite','polyuria','family_history','mucoid_sputum',
    'rusty_sputum','lack_of_concentration','visual_disturbances','receiving_blood_transfusion',
    'receiving_unsterile_injections','coma','stomach_bleeding','distention_of_abdomen',
    'history_of_alcohol_consumption','fluid_overload','blood_in_sputum','prominent_veins_on_calf',
    'palpitations','painful_walking','pus_filled_pimples','blackheads','scurring','skin_peeling',
    'silver_like_dusting','small_dents_in_nails','inflammatory_nails','blister','red_sore_around_nose',
    'yellow_crust_ooze']

disease=['Fungal infection', 'Allergy', 'GERD', 'Chronic cholestasis',
       'Drug Reaction', 'Peptic ulcer diseae', 'AIDS', 'Diabetes ',
       'Gastroenteritis', 'Bronchial Asthma', 'Hypertension ', 'Migraine',
       'Cervical spondylosis', 'Paralysis (brain hemorrhage)', 'Jaundice',
       'Malaria', 'Chicken pox', 'Dengue', 'Typhoid', 'hepatitis A',
       'Hepatitis B', 'Hepatitis C', 'Hepatitis D', 'Hepatitis E',
       'Alcoholic hepatitis', 'Tuberculosis', 'Common Cold', 'Pneumonia',
       'Dimorphic hemmorhoids(piles)', 'Heart attack', 'Varicose veins',
       'Hypothyroidism', 'Hyperthyroidism', 'Hypoglycemia',
       'Osteoarthristis', 'Arthritis',
       '(vertigo) Paroymsal  Positional Vertigo', 'Acne',
       'Urinary tract infection', 'Psoriasis', 'Impetigo']

l2=[]
for i in range(0,len(l1)):
    l2.append(0)
print(l2)

from google.colab import files
uploaded = files.upload()

import io
import pandas as pd
# Assuming the uploaded file is named 'your_file.csv'
df = pd.read_csv(io.BytesIO(uploaded['prototype.csv']))

df=pd.read_csv("training.csv")
DF= pd.read_csv('training.csv', index_col='prognosis')
#Replace the values in the imported file by pandas by the inbuilt function replace in pandas.

df.replace({'prognosis':{'Fungal infection':0,'Allergy':1,'GERD':2,'Chronic cholestasis':3,'Drug Reaction':4,
    'Peptic ulcer diseae':5,'AIDS':6,'Diabetes ':7,'Gastroenteritis':8,'Bronchial Asthma':9,'Hypertension ':10,
    'Migraine':11,'Cervical spondylosis':12,
    'Paralysis (brain hemorrhage)':13,'Jaundice':14,'Malaria':15,'Chicken pox':16,'Dengue':17,'Typhoid':18,'hepatitis A':19,
    'Hepatitis B':20,'Hepatitis C':21,'Hepatitis D':22,'Hepatitis E':23,'Alcoholic hepatitis':24,'Tuberculosis':25,
    'Common Cold':26,'Pneumonia':27,'Dimorphic hemmorhoids(piles)':28,'Heart attack':29,'Varicose veins':30,'Hypothyroidism':31,
    'Hyperthyroidism':32,'Hypoglycemia':33,'Osteoarthristis':34,'Arthritis':35,
    '(vertigo) Paroymsal  Positional Vertigo':36,'Acne':37,'Urinary tract infection':38,'Psoriasis':39,
    'Impetigo':40}},inplace=True)
#df.head()
DF.head()

import numpy as np
import matplotlib.pyplot as plt
import math

def plotPerColumnDistribution(df1, nGraphShown, nGraphPerRow):
    nunique = df1.nunique()
    df1 = df1[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values
    nRow, nCol = df1.shape
    columnNames = list(df1)
    nGraphRow = math.ceil((nCol + nGraphPerRow - 1) / nGraphPerRow)  # Ensure nGraphRow is a whole number
    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')
    for i in range(min(nCol, nGraphShown)):
        plt.subplot(nGraphRow, nGraphPerRow, i + 1)
        columnDf = df1.iloc[:, i]
        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):
            valueCounts = columnDf.value_counts()
            valueCounts.plot.bar()
        else:
            columnDf.hist()
        plt.ylabel('counts')
        plt.xticks(rotation = 90)
        plt.title(f'{columnNames[i]} (column {i})')
    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)
    plt.show()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def plotScatterMatrix(df1, plotSize, textSize):
    df1 = df1.select_dtypes(include=[np.number])  # keep only numerical columns
    # Remove rows and columns that would lead to df being singular
    df1 = df1.dropna(axis='columns')
    df1 = df1[[col for col in df1 if df1[col].nunique() > 1]]  # keep columns where there are more than 1 unique values
    columnNames = list(df1)
    if len(columnNames) > 10:  # reduce the number of columns for matrix inversion of kernel density plots
        columnNames = columnNames[:10]
    df1 = df1[columnNames]
    ax = pd.plotting.scatter_matrix(df1, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')
    corrs = df1.corr().values
    for i, j in zip(*plt.np.triu_indices_from(ax, k=1)):
        ax[i, j].annotate(f'Corr. coef = {corrs[i, j]:.3f}', (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)
    plt.suptitle('Scatter and Density Plot')
    plt.show()

plotPerColumnDistribution(df, 10, 5)

plotScatterMatrix(df, 20, 10)

X= df[l1]
y = df[["prognosis"]]
np.ravel(y)
print(X)

print(y)

from google.colab import files
uploaded = files.upload()

import io
import pandas as pd
# Assuming the uploaded file is named 'your_file.csv'
df = pd.read_csv(io.BytesIO(uploaded['test.csv']))

tr=pd.read_csv("testing.csv")

#Using inbuilt function replace in pandas for replacing the values

tr.replace({'prognosis':{'Fungal infection':0,'Allergy':1,'GERD':2,'Chronic cholestasis':3,'Drug Reaction':4,
    'Peptic ulcer diseae':5,'AIDS':6,'Diabetes ':7,'Gastroenteritis':8,'Bronchial Asthma':9,'Hypertension ':10,
    'Migraine':11,'Cervical spondylosis':12,
    'Paralysis (brain hemorrhage)':13,'Jaundice':14,'Malaria':15,'Chicken pox':16,'Dengue':17,'Typhoid':18,'hepatitis A':19,
    'Hepatitis B':20,'Hepatitis C':21,'Hepatitis D':22,'Hepatitis E':23,'Alcoholic hepatitis':24,'Tuberculosis':25,
    'Common Cold':26,'Pneumonia':27,'Dimorphic hemmorhoids(piles)':28,'Heart attack':29,'Varicose veins':30,'Hypothyroidism':31,
    'Hyperthyroidism':32,'Hypoglycemia':33,'Osteoarthristis':34,'Arthritis':35,
    '(vertigo) Paroymsal  Positional Vertigo':36,'Acne':37,'Urinary tract infection':38,'Psoriasis':39,
    'Impetigo':40}},inplace=True)
tr.head()

plotPerColumnDistribution(tr, 10, 5)

plotScatterMatrix(tr, 20, 10)

X_test= tr[l1]
y_test = tr[["prognosis"]]
np.ravel(y_test)
print(X_test)

print(y_test)

def scatterplt(disea):
    x = ((DF.loc[disea]).sum())#total sum of symptom reported for given disease
    x.drop(x[x==0].index,inplace=True)#droping symptoms with values 0
    print(x.values)
    y = x.keys()#storing nameof symptoms in y
    print(len(x))
    print(len(y))
    plt.title(disea)
    plt.scatter(y,x.values)
    plt.show()

def scatterinp(sym1,sym2,sym3,sym4,sym5):
    x = [sym1,sym2,sym3,sym4,sym5]#storing input symptoms in y
    y = [0,0,0,0,0]#creating and giving values to the input symptoms
    if(sym1!='Select Here'):
        y[0]=1
    if(sym2!='Select Here'):
        y[1]=1
    if(sym3!='Select Here'):
        y[2]=1
    if(sym4!='Select Here'):
        y[3]=1
    if(sym5!='Select Here'):
        y[4]=1
    print(x)
    print(y)
    plt.scatter(x,y)
    plt.show()

import ipywidgets as widgets
from IPython.display import display
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix, accuracy_score
import sqlite3
import numpy as np

# Initialize the GUI widgets
NameEn = widgets.Text(description='Name:', value='')
Symptom1 = widgets.Dropdown(description='Symptom 1:')
Symptom2 = widgets.Dropdown(description='Symptom 2:')
Symptom3 = widgets.Dropdown(description='Symptom 3:')
Symptom4 = widgets.Dropdown(description='Symptom 4:')
Symptom5 = widgets.Dropdown(description='Symptom 5:')

# Update the options of the dropdown widgets
Symptom1.options = ['Select Here'] + l1
Symptom2.options = ['Select Here'] + l1
Symptom3.options = ['Select Here'] + l1
Symptom4.options = ['Select Here'] + l1
Symptom5.options = ['Select Here'] + l1


# Create a button widget
button = widgets.Button(description='Run Naive Bayes')

# Function to handle button click event
def on_button_clicked(b):
    NaiveBayes()

# Register the button click event handler
button.on_click(on_button_clicked)

# Display the GUI widgets and button
display(NameEn, Symptom1, Symptom2, Symptom3, Symptom4, Symptom5, button)

# Function to implement Naive Bayes
def NaiveBayes():
    if len(NameEn.value) == 0:
        print("Error: Please fill in the Name field.")
        return
    elif (Symptom1.value == "Select Here") or (Symptom2.value == "Select Here"):
        print("Error: Please fill in at least the first two Symptoms.")
        return
    else:
        try:
            from sklearn.naive_bayes import GaussianNB
            gnb = GaussianNB()
            gnb = gnb.fit(X,np.ravel(y))


            y_pred = gnb.predict(X_test)
            print("Naive Bayes")
            print("Accuracy")
            print(accuracy_score(y_test, y_pred))
            print(accuracy_score(y_test, y_pred,normalize=False))
            print("Confusion matrix")
            print(confusion_matrix(y_test, y_pred))
            conf_matrix=confusion_matrix(y_test,y_pred)
            print(conf_matrix)

            psymptoms = [Symptom1.value, Symptom2.value, Symptom3.value, Symptom4.value, Symptom5.value]
            for k in range(len(l1)):
                for z in psymptoms:
                    if z == l1[k]:
                        l2[k] = 1

            inputtest = [l2]
            predict = gnb.predict(inputtest)
            predicted = predict[0]

            pred3 =None
            for a in range(0,len(disease)):
                if predicted == a:
                    pred3 = disease[a]
                    break

            if pred3:
                print("Predicted Disease:", pred3)
            else:
                print("Error: Disease not found.")

            conn = sqlite3.connect('database.db')
            c = conn.cursor()
            c.execute("CREATE TABLE IF NOT EXISTS NaiveBayes(Name TEXT, Symptom1 TEXT, Symptom2 TEXT, Symptom3 TEXT, Symptom4 TEXT, Symptom5 TEXT, Disease TEXT)")
            c.execute("INSERT INTO NaiveBayes(Name, Symptom1, Symptom2, Symptom3, Symptom4, Symptom5, Disease) VALUES(?,?,?,?,?,?,?)",(NameEn.value, Symptom1.value, Symptom2.value, Symptom3.value, Symptom4.value, Symptom5.value, pred3))
            conn.commit()
            c.close()
            conn.close()

            scatterplt(pred3)
        except Exception as e:
            print("An error occurred:", e)

# Function to display scatter plot
def scatterplt(disea):
    try:
        x = ((DF.loc[disea]).sum())  # total sum of symptom reported for given disease
        x.drop(x[x==0].index, inplace=True)  # drop symptoms with values 0
        print("Symptoms for", disea)
        print(x)
        plt.title(disea)
        plt.scatter(x.keys(), x.values)
        plt.show()
    except Exception as e:
        print("An error occurred while displaying scatter plot:", e)
